// Generated by gencpp from file custom_msg/obavoid_flag_x_z.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_OBAVOID_FLAG_X_Z_H
#define CUSTOM_MSG_MESSAGE_OBAVOID_FLAG_X_Z_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg
{
template <class ContainerAllocator>
struct obavoid_flag_x_z_
{
  typedef obavoid_flag_x_z_<ContainerAllocator> Type;

  obavoid_flag_x_z_()
    : flag(0)
    , x(0.0)
    , z(0.0)  {
    }
  obavoid_flag_x_z_(const ContainerAllocator& _alloc)
    : flag(0)
    , x(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _flag_type;
  _flag_type flag;

   typedef float _x_type;
  _x_type x;

   typedef float _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> const> ConstPtr;

}; // struct obavoid_flag_x_z_

typedef ::custom_msg::obavoid_flag_x_z_<std::allocator<void> > obavoid_flag_x_z;

typedef boost::shared_ptr< ::custom_msg::obavoid_flag_x_z > obavoid_flag_x_zPtr;
typedef boost::shared_ptr< ::custom_msg::obavoid_flag_x_z const> obavoid_flag_x_zConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::obavoid_flag_x_z_<ContainerAllocator1> & lhs, const ::custom_msg::obavoid_flag_x_z_<ContainerAllocator2> & rhs)
{
  return lhs.flag == rhs.flag &&
    lhs.x == rhs.x &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::obavoid_flag_x_z_<ContainerAllocator1> & lhs, const ::custom_msg::obavoid_flag_x_z_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1d6d4965575c5ce2f191a4a891e87a9";
  }

  static const char* value(const ::custom_msg::obavoid_flag_x_z_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1d6d4965575c5ceULL;
  static const uint64_t static_value2 = 0x2f191a4a891e87a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/obavoid_flag_x_z";
  }

  static const char* value(const ::custom_msg::obavoid_flag_x_z_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 flag\n"
"float32 x\n"
"float32 z\n"
;
  }

  static const char* value(const ::custom_msg::obavoid_flag_x_z_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.x);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obavoid_flag_x_z_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::obavoid_flag_x_z_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::obavoid_flag_x_z_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_OBAVOID_FLAG_X_Z_H
