// Generated by gencpp from file custom_msg/gui_msg.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_GUI_MSG_H
#define CUSTOM_MSG_MESSAGE_GUI_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg
{
template <class ContainerAllocator>
struct gui_msg_
{
  typedef gui_msg_<ContainerAllocator> Type;

  gui_msg_()
    : flag_ob_avoid_or_g2g(0)
    , goal_no(0)
    , distance(0.0)
    , location_x(0.0)
    , location_y(0.0)  {
    }
  gui_msg_(const ContainerAllocator& _alloc)
    : flag_ob_avoid_or_g2g(0)
    , goal_no(0)
    , distance(0.0)
    , location_x(0.0)
    , location_y(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _flag_ob_avoid_or_g2g_type;
  _flag_ob_avoid_or_g2g_type flag_ob_avoid_or_g2g;

   typedef int32_t _goal_no_type;
  _goal_no_type goal_no;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _location_x_type;
  _location_x_type location_x;

   typedef double _location_y_type;
  _location_y_type location_y;





  typedef boost::shared_ptr< ::custom_msg::gui_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::gui_msg_<ContainerAllocator> const> ConstPtr;

}; // struct gui_msg_

typedef ::custom_msg::gui_msg_<std::allocator<void> > gui_msg;

typedef boost::shared_ptr< ::custom_msg::gui_msg > gui_msgPtr;
typedef boost::shared_ptr< ::custom_msg::gui_msg const> gui_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::gui_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::gui_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::gui_msg_<ContainerAllocator1> & lhs, const ::custom_msg::gui_msg_<ContainerAllocator2> & rhs)
{
  return lhs.flag_ob_avoid_or_g2g == rhs.flag_ob_avoid_or_g2g &&
    lhs.goal_no == rhs.goal_no &&
    lhs.distance == rhs.distance &&
    lhs.location_x == rhs.location_x &&
    lhs.location_y == rhs.location_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::gui_msg_<ContainerAllocator1> & lhs, const ::custom_msg::gui_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg::gui_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::gui_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::gui_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::gui_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::gui_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::gui_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::gui_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcfe2d5e2cb7ff83917cfec5609b532b";
  }

  static const char* value(const ::custom_msg::gui_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfcfe2d5e2cb7ff83ULL;
  static const uint64_t static_value2 = 0x917cfec5609b532bULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::gui_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/gui_msg";
  }

  static const char* value(const ::custom_msg::gui_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::gui_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 flag_ob_avoid_or_g2g \n"
"int32 goal_no\n"
"float64 distance\n"
"float64 location_x\n"
"float64 location_y\n"
;
  }

  static const char* value(const ::custom_msg::gui_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::gui_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag_ob_avoid_or_g2g);
      stream.next(m.goal_no);
      stream.next(m.distance);
      stream.next(m.location_x);
      stream.next(m.location_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gui_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::gui_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::gui_msg_<ContainerAllocator>& v)
  {
    s << indent << "flag_ob_avoid_or_g2g: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag_ob_avoid_or_g2g);
    s << indent << "goal_no: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_no);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "location_x: ";
    Printer<double>::stream(s, indent + "  ", v.location_x);
    s << indent << "location_y: ";
    Printer<double>::stream(s, indent + "  ", v.location_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_GUI_MSG_H
