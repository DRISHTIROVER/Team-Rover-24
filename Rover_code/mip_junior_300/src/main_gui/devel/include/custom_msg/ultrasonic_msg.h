// Generated by gencpp from file custom_msg/ultrasonic_msg.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_ULTRASONIC_MSG_H
#define CUSTOM_MSG_MESSAGE_ULTRASONIC_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg
{
template <class ContainerAllocator>
struct ultrasonic_msg_
{
  typedef ultrasonic_msg_<ContainerAllocator> Type;

  ultrasonic_msg_()
    : r1(0.0)
    , r2(0.0)
    , r3(0.0)
    , r4(0.0)
    , r5(0.0)  {
    }
  ultrasonic_msg_(const ContainerAllocator& _alloc)
    : r1(0.0)
    , r2(0.0)
    , r3(0.0)
    , r4(0.0)
    , r5(0.0)  {
  (void)_alloc;
    }



   typedef float _r1_type;
  _r1_type r1;

   typedef float _r2_type;
  _r2_type r2;

   typedef float _r3_type;
  _r3_type r3;

   typedef float _r4_type;
  _r4_type r4;

   typedef float _r5_type;
  _r5_type r5;





  typedef boost::shared_ptr< ::custom_msg::ultrasonic_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::ultrasonic_msg_<ContainerAllocator> const> ConstPtr;

}; // struct ultrasonic_msg_

typedef ::custom_msg::ultrasonic_msg_<std::allocator<void> > ultrasonic_msg;

typedef boost::shared_ptr< ::custom_msg::ultrasonic_msg > ultrasonic_msgPtr;
typedef boost::shared_ptr< ::custom_msg::ultrasonic_msg const> ultrasonic_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::ultrasonic_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::ultrasonic_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg::ultrasonic_msg_<ContainerAllocator1> & lhs, const ::custom_msg::ultrasonic_msg_<ContainerAllocator2> & rhs)
{
  return lhs.r1 == rhs.r1 &&
    lhs.r2 == rhs.r2 &&
    lhs.r3 == rhs.r3 &&
    lhs.r4 == rhs.r4 &&
    lhs.r5 == rhs.r5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg::ultrasonic_msg_<ContainerAllocator1> & lhs, const ::custom_msg::ultrasonic_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg::ultrasonic_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::ultrasonic_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::ultrasonic_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::ultrasonic_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::ultrasonic_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::ultrasonic_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::ultrasonic_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6539a993ae760db074e494e04960752";
  }

  static const char* value(const ::custom_msg::ultrasonic_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6539a993ae760dbULL;
  static const uint64_t static_value2 = 0x074e494e04960752ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::ultrasonic_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/ultrasonic_msg";
  }

  static const char* value(const ::custom_msg::ultrasonic_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::ultrasonic_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 r1\n"
"float32 r2\n"
"float32 r3\n"
"float32 r4\n"
"float32 r5\n"
;
  }

  static const char* value(const ::custom_msg::ultrasonic_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::ultrasonic_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r1);
      stream.next(m.r2);
      stream.next(m.r3);
      stream.next(m.r4);
      stream.next(m.r5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ultrasonic_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::ultrasonic_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::ultrasonic_msg_<ContainerAllocator>& v)
  {
    s << indent << "r1: ";
    Printer<float>::stream(s, indent + "  ", v.r1);
    s << indent << "r2: ";
    Printer<float>::stream(s, indent + "  ", v.r2);
    s << indent << "r3: ";
    Printer<float>::stream(s, indent + "  ", v.r3);
    s << indent << "r4: ";
    Printer<float>::stream(s, indent + "  ", v.r4);
    s << indent << "r5: ";
    Printer<float>::stream(s, indent + "  ", v.r5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_ULTRASONIC_MSG_H
